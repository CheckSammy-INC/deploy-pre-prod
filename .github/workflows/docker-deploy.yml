name: Deploy to CentOS VPS

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: agsvk/test-wordpress-base:latest

  build-and-push-apache:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build and push Apache Docker image
      uses: docker/build-push-action@v2
      with:
        context: ./apache-container
        push: true
        tags: agsvk/apache-container:latest

  build-self-hosted:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@main

    - name: Run build self-hosted
      run: docker-compose up -d

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push, build-and-push-apache, build-self-hosted]

    steps:
    - name: Deploy to CentOS VPS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        port: 522
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_PRIVATE_KEY }}
        sudo_flags: -S
        script: |
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | sudo docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          # works! - sudo docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

          sudo docker pull agsvk/test-wordpress-base:latest
          sudo docker pull agsvk/apache-container:latest

          sudo docker network create my-network || true

          sudo docker stop container-wp-base || true
          sudo docker rm container-wp-base || true
          # sudo docker run -d --name container-wp-base -p 8080:80 agsvk/test-wordpress-base:latest
          # Expose the apache-container to the host on port 8080, and allow the container-wp-base to communicate over the internal Docker network without exposing it to the host.
          sudo docker run -d --name container-wp-base --network my-network agsvk/test-wordpress-base:latest

          sudo docker stop apache-container || true
          sudo docker rm apache-container || true
          sudo docker run -d --name apache-container --network my-network -p 8080:80 agsvk/apache-container:latest